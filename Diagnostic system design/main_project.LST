C51 COMPILER V9.60.0.0   MAIN_PROJECT                                                      09/28/2020 20:52:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN_PROJECT
OBJECT MODULE PLACED IN main_project.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main_project.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include<reg51.h>
   2          
   3          
   4          #include"uart.h"             // uart declarations
   5          
   6          
   7          sbit sw=P1^0;
   8          sbit led=P1^1;
   9          
  10          sbit sw1=P3^7;
  11          
  12          #include"lcd1.h"
  13          
  14          #include"types.h"           // typedef for existing datatypes
  15          #include"i2c.h"            //  i2c declarations
  16          #include"i2c_defines.h"   // i2c defines for scl,sda
  17          #include"delay.h"        //  delay declaration
  18          
  19          
  20          #include"mcp3204.h"            // mcp3204 declarations
  21          #include"mcp3204_defines.h"    // mcp3204 definitions 
  22          
  23          
  24          #include"spi.h"            // spi declarations
  25          #include"spi_defines.h"   //  spi definitions
  26          
  27          
  28          #include"glcd.h"         // glcd declarations
  29          
  30          //#include<stdio.h>
  31          
  32          char check(char ,u8 );
  33          
  34          main()
  35          {
  36   1      u8 s1[6]="hello",s2[6]=" ",i;
  37   1      float adcvalF;
  38   1      u16 cnt;
  39   1      char ch;       
  40   1      uart_init();
  41   1      LCD_init();
  42   1      while(1)
  43   1      {
  44   2      uart_txstr("***menu***\r\n");
  45   2      uart_txstr("1.SWITCH\r\n");
  46   2      uart_txstr("2.LCD\r\n");
  47   2      uart_txstr("3.EEPROM\r\n");
  48   2      uart_txstr("4.SPI\r\n");
  49   2      uart_txstr("5.GLCD\r\n");
  50   2      ch=uart_rxchar();
  51   2      switch(ch)
  52   2      {
  53   3      case '1': cnt=4000;
  54   3                while(--cnt)
  55   3                {
C51 COMPILER V9.60.0.0   MAIN_PROJECT                                                      09/28/2020 20:52:23 PAGE 2   

  56   4            if(sw==0)break;
  57   4                delay_ms(1);
  58   4            }
  59   3            uart_txstr("connect SW to P1.0\r\n");
  60   3            uart_txstr("press now\r\n");           
  61   3                if(sw==0)
  62   3                {
  63   4            uart_txstr("switch is working properly\r\n");
  64   4            }
  65   3                else
  66   3              {
  67   4            uart_txstr("may be SW is not connected to P1.0\r\n");
  68   4            uart_txstr("may be You have used active high switch instead of active low switch\r\n");
  69   4              }
  70   3            break;
  71   3      
  72   3      case '2': LCD_init();
  73   3            LCD_cmd(0x80);
  74   3              LCD_str("TEST OK ");
  75   3            //LCD_char('A');
  76   3            LCD_cmd(0xc0);
  77   3            LCD_str("ALLpixelsworking");
  78   3            //LCD_char('B');
  79   3            uart_txstr("connect LCD to P0\r\n");
  80   3            uart_txstr("connect RS,RS,EN to P3.4,P3.5,P3.6 \r\n");
  81   3            uart_txstr("connect LCD/GLCD button to LCD mode\r\n"); 
  82   3            uart_txstr("P3.0,P3.1 pin switches pull to ON side\r\n");   
  83   3              uart_txstr("check whether lcd is working or not\r\n");
  84   3            uart_txstr("press y:yes n:no\r\n");
  85   3              while(check(uart_rxchar(),7));          
  86   3              break;
  87   3           
  88   3      case '3': for(i=0;s1[i];i++)
  89   3                i2cdevwrite(0xa0,i,s1[i]);
  90   3                for(i=0;s1[i];i++)
  91   3                s2[i]=i2cdevread(0xa0,i);
  92   3                delay_ms(2000);
  93   3                LCD_init();
  94   3                LCD_cmd(0x84);
  95   3                LCD_str(s2);
  96   3            uart_txstr("connect SCL,SDA to P3.2,P3.3\r\n");
  97   3            uart_txstr("check whether lcd is connected to P0\r\n");
  98   3            uart_txstr("check whether EEPROM is working or not\r\n");
  99   3            uart_txstr("press y:yes n:no\r\n");
 100   3            while(check(uart_rxchar(),8));          
 101   3                               
 102   3              break;
 103   3      
 104   3      case '4': adcvalF=read1adc_mcp3204(0);  
 105   3              uart_txfloat(adcvalF);
 106   3                delay_ms(100);
 107   3            uart_txstr("connect CS,MOSI(DIN),MISO(DOUT),CLK to P2.4,P2.5,P2.6,P2.7\r\n");
 108   3              uart_txstr("check the ADC values by connecting one end of pin to any of the channels and other end 
             -u have to connect either VDD or GND\r\n"); 
 109   3            uart_txstr("check whether MCP3204 is working or not\r\n");
 110   3                uart_txstr("press y:yes n:no\r\n");
 111   3            while(check(uart_rxchar(),9));          
 112   3                               
 113   3              break;
 114   3      case '5': glcd_init();
 115   3              glcd_clr(0);
 116   3              write_cmd(0xc0);
C51 COMPILER V9.60.0.0   MAIN_PROJECT                                                      09/28/2020 20:52:23 PAGE 3   

 117   3              glcd_char(0xb8,0x40,'1');
 118   3              delay(150);
 119   3              write_cmd(0xc5);
 120   3              glcd_str(0xbd,0x47,"vector");
 121   3              delay(150);
 122   3            uart_txstr("connect LCD/GLCD button to GLCD mode\r\n"); 
 123   3            uart_txstr("connect GLCD to P0");
 124   3            uart_txstr("connect RS(D/I),RW,EN to P3.4,P3.5,P3.6\r\n");
 125   3            uart_txstr("connect RS,CS1,CS2 to P1.2,P1.3,P1.4\r\n");
 126   3            uart_txstr("check whether GLCD is working or not\r\n");
 127   3              uart_txstr("press y:yes n:no\r\n");
 128   3            while(check(uart_rxchar(),10));          
 129   3        
 130   3              break;
 131   3            
 132   3      default:  uart_txstr("you have entered inavlid choice\r\n");
 133   3      }
 134   2      }
 135   1      } 
 136          
 137          char check(char ch,u8 ty)
 138          {
 139   1      if(ch!='y'&&ch!='n')
 140   1      return 1;
 141   1      if(ch=='n')
 142   1      {
 143   2      uart_txstr("error possibilities are:\r\n");
 144   2      {
 145   3       if(ty==7)    // LCD error possibilities
 146   3       {
 147   4       uart_txstr("there may be lose connection\r\n"); 
 148   4       uart_txstr("may be GLCD/LCD button not connected to LCD mode\r\n");
 149   4       uart_txstr("may be RS,RW EN  are not connected to P3.4,P3.5,P3.6 or not\r\n");
 150   4       uart_txstr("may be LCD datapins(D0....D7) are not connected to P0 or not\r\n");
 151   4       }
 152   3       else if(ty==8) // EEPROM(DS1621) error possibilities
 153   3       {
 154   4       uart_txstr("there may be lose connection\r\n"); 
 155   4       uart_txstr("may be SCL,SDA are connected  to P3.2,P3.3\r\n");
 156   4       uart_txstr("may be EEPROM(DS1621) is not working\r\n");
 157   4       }
 158   3       else if(ty==9) // MCP3201 error possibilities
 159   3       {
 160   4       uart_txstr("there may be lose connection\r\n"); 
 161   4       uart_txstr("may be  CS is not connected  to P2.4\r\n");
 162   4       uart_txstr("may be MOSI(DIN),MISO(DOUT),CLK are not connected  to P2^5,P2.6,P2.7\r\n");
 163   4       }
 164   3       else if(ty==10)
 165   3       {
 166   4       uart_txstr("there may be lose connection\r\n"); 
 167   4       uart_txstr("may be GLCD/LCD button not connected to GLCD mode\r\n");
 168   4       uart_txstr("may be  GLCD,RS(D/I),RW(R/W),EN,RS,CS2,CS1 are not connected to P0,P3.4,P.5,P3.6,P1.2,P1.3,P1
             -.4\r\n");
 169   4       }
 170   3       else {}
 171   3      }
 172   2      } 
 173   1      return 0;
 174   1      
 175   1      }
 176                  

C51 COMPILER V9.60.0.0   MAIN_PROJECT                                                      09/28/2020 20:52:23 PAGE 4   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    815    ----
   CONSTANT SIZE    =   1598    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
